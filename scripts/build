#!/usr/bin/env bash
set -euo pipefail

# ============================================================================
# Functions Definitions
# ============================================================================

show_help () {
    echo "Builds and wraps the source code into firefox.zip, chrome.zip and"
    echo "source.zip files that later can be used to upload extensions to"
    echo "Chrome and Mozilla stores or test them in the browser."
    echo ""
    echo "Usage:"
    echo "  $0 [OPTION...]"
    echo ""
    echo "Options:"
    echo "  --verbose        Enable verbose mode"
    echo "  --help           Show help options"
    echo "  --firefox        Build only Firefox extension"
    echo "  --chrome         Build only Chrome extension"
}

build_source_zip_archive () {
    ZIP_NAME="source.zip"

    echo "‚è≥ Zippping $ZIP_NAME..."

    zip -r "$ZIP_NAME" . -x "node_modules/*" ".git/*" >/dev/null 2>&1

    echo "‚úÖ DONE: archived: $ZIP_NAME"
}

build_zip_archive () {
    PLATFORM_NAME="$1"
    REGULAR_MANIFEST_PATH="./public/manifest.json"
    ZIP_NAME="$PLATFORM_NAME.zip"
    MANIFEST_PATH="./public/$2"

    if [[ ! -f "$MANIFEST_PATH" ]]; then
        echo "Manifest file `$MANIFEST_PATH` not found for $PLATFORM_NAME"
        return
    fi

    echo "‚è≥ Zippping $ZIP_NAME..."

    # Rename versionaled manifest to a regular manifest.json
    mv "$MANIFEST_PATH" "$REGULAR_MANIFEST_PATH"

    if [[ $verbose -eq 1 ]]; then
        podman-compose exec app npm run build
    else
        podman-compose exec app npm run build >/dev/null 2>&1
    fi

    echo "‚úÖ DONE: npm run build"

    if [[ $verbose -eq 1 ]]; then
        cd dist && zip -r ../"$ZIP_NAME" . && cd -
    else
        cd dist && zip -r ../"$ZIP_NAME" . >/dev/null 2>&1 && cd - >/dev/null 2>&1
    fi

    # Rename regular manifest.json back to a versioned
    mv "$REGULAR_MANIFEST_PATH" "$MANIFEST_PATH" 

    echo "‚úÖ DONE: archived: $ZIP_NAME"
}

start_container_if_needed () {
    podman_exists=$(command -v podman-compose)
    docker_exists=$(command -v docker)

    if [[ -n "$podman_exists" ]]; then
        is_running=$(podman ps | grep -E 'Up\s[0-9]+\s' || true)

        if [[ -z "$is_running" ]]; then
            echo "ü¶¶ Starting a Podman container..."
            podman-compose up -d >/dev/null
        fi

        return
    fi

    if [[ -n "$docker_exists" ]]; then
        is_running=$(docker ps | grep -E 'Up\s[0-9]+\s' || true)

        if [[ -z "$is_running" ]]; then
            echo "üêã Starting a Docker container..."
            docker compose up -d >/dev/null
        fi

        return
    fi

    echo "‚ùå ERROR: You need to have `podman-compose` or `docker` to run this script"
}

# ============================================================================
# Reading and Settings Flag
# ============================================================================

verbose=0
help=0
only_firefox=0
only_chrome=0

# Parse command-line arguments
for arg in "$@"; do
    if [[ "$arg" == "--verbose" ]]; then
        verbose=1
    fi

    if [[ "$arg" == "--help" ]]; then
        help=1
    fi

    if [[ "$arg" == "--firefox" ]]; then
        only_firefox=1
    fi

    if [[ "$arg" == "--chrome" ]]; then
        only_chrome=1
    fi
done

# ============================================================================
# Program's Logic
# ============================================================================

# Display help message if --help is set
if [[ $help -eq 1 ]]; then
    show_help
    exit 0
fi

start_container_if_needed

if [[ $only_firefox -eq 0 ]] && [[ $only_chrome -eq 0 ]]; then
    echo "üî® No platform specified, building both extensions..."

    build_zip_archive "firefox" "manifest2.json"
    build_zip_archive "chrome" "manifest3.json"
    build_source_zip_archive
elif [[ $only_firefox -eq 1 ]]; then
    build_zip_archive "firefox" "manifest2.json"
elif [[ $only_chrome -eq 1 ]]; then
    build_zip_archive "chrome" "manifest3.json"
fi

rm -r dist
